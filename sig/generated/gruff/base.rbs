# Generated from lib/gruff/base.rb with RBS::Inline

# #
#  = Gruff. Graphs.
#
#  Author:: Geoffrey Grosenbach boss@topfunky.com
#
#  Originally Created:: October 23, 2005
#
#  Extra thanks to Tim Hunter for writing RMagick, and also contributions by
#  Jarkko Laine, Mike Perham, Andreas Schwarz, Alun Eyre, Guillaume Theoret,
#  David Stokar, Paul Rogers, Dave Woodward, Frank Oxener, Kevin Clark, Cies
#  Breijs, Richard Cowin, and a cast of thousands.
#
#  See {Gruff::Base#theme=} for setting themes.
module Gruff
  # A common base class inherited from class of drawing a graph.
  class Base
    # Space around text elements. Mostly used for vertical spacing.
    LEGEND_MARGIN: ::Float

    TITLE_MARGIN: ::Float

    LABEL_MARGIN: ::Float

    DEFAULT_MARGIN: ::Float

    DEFAULT_TARGET_WIDTH: ::Float

    # Blank space between graph and labels. Default is +15+.
    attr_writer label_margin: Float | Integer

    # Blank space above the graph. Default is +20+.
    attr_writer top_margin: Float | Integer

    # Blank space below the graph. Default is +20+.
    attr_writer bottom_margin: Float | Integer

    # Blank space to the right of the graph. Default is +20+.
    attr_writer right_margin: Float | Integer

    # Blank space to the left of the graph. Default is +20+.
    attr_writer left_margin: Float | Integer

    # Blank space below the title. Default is +20+.
    attr_writer title_margin: Float | Integer

    # Blank space below the legend. Default is +20+.
    attr_writer legend_margin: Float | Integer

    # Truncates labels if longer than max specified.
    attr_writer label_max_size: Float | Integer

    # How truncated labels visually appear if they exceed {#label_max_size=}.
    #
    # - +:absolute+ - does not show trailing dots to indicate truncation. This is the default.
    # - +:trailing_dots+ - shows trailing dots to indicate truncation (note that {#label_max_size=}
    #   must be greater than 3).
    attr_writer label_truncation_style: :absolute | :trailing_dots

    # Set a label for the bottom of the graph.
    attr_writer x_axis_label: String

    # Set a label for the left side of the graph.
    attr_writer y_axis_label: String

    # Allow passing lambda to format labels for x axis.
    attr_writer x_axis_label_format: Proc

    # Allow passing lambda to format labels for y axis.
    attr_writer y_axis_label_format: Proc

    # Set increment of the vertical marking lines.
    attr_writer x_axis_increment: Float | Integer

    # Set increment of the horizontal marking lines.
    attr_writer y_axis_increment: Float | Integer

    # Get or set the list of colors that will be used to draw the bars or lines.
    attr_accessor colors: [ String ]

    # Prevent drawing of line markers. Default is +false+.
    attr_writer hide_line_markers: bool

    # Prevent drawing of the legend. Default is +false+.
    attr_writer hide_legend: bool

    # Prevent drawing of the title. Default is +false+.
    attr_writer hide_title: bool

    # Prevent drawing of line numbers. Default is +false+.
    attr_writer hide_line_numbers: bool

    # Set a message shown when there is no data. Fits up to 20 characters. Defaults
    # to +"No Data."+.
    attr_writer no_data_message: String

    # Set the color of the auxiliary lines.
    attr_writer marker_color: String

    # Set the shadow color of the auxiliary lines.
    attr_writer marker_shadow_color: String

    # Set the number of horizontal lines shown for reference.
    attr_writer marker_count: Float | Integer

    # Set to +true+ if you want the data sets sorted with largest avg values drawn
    # first. Default is +false+.
    attr_writer sort: bool

    # Set to +true+ if you want the data sets drawn with largest avg values drawn
    # first. This does not affect the legend. Default is +false+.
    attr_writer sorted_drawing: bool

    # Display the legend under the graph. Default is +false+.
    attr_writer legend_at_bottom: bool

    # Optionally set the size of the colored box by each item in the legend.
    # Default is +20.0+.
    #
    # Will be scaled down if graph is smaller than 800px wide.
    attr_writer legend_box_size: Float | Integer

    # If one numerical argument is given, the graph is drawn at 4/3 ratio
    # according to the given width (+800+ results in 800x600, +400+ gives 400x300,
    # etc.).
    #
    # Or, send a geometry string for other ratios ( +'800x400'+, +'400x225'+).
    #
    # @param target_width [Numeric, String] The graph image width.
    #
    # @rbs target_width: (String | Float | Integer)
    # @rbs return: void
    def initialize: (?String | Float | Integer target_width) -> void

    def initialize_graph_scale: () -> untyped

    def initialize_store: () -> untyped

    # Initialize instance variable of attributes
    #
    # Subclasses can override this, call super, then set values separately.
    #
    # This makes it possible to set defaults in a subclass but still allow
    # developers to change this values in their program.
    def initialize_attributes: () -> untyped

    # A hash of names for the individual columns, where the key is the array
    # index for the column this label represents.
    # Not all columns need to be named with hash.
    #
    # Or, an array corresponding to the data values.
    #
    # @param labels [Hash, Array] the labels.
    # @rbs labels: (Hash[Integer, String] | [String | nil])
    #
    # @example
    #   g = Gruff::Bar.new
    #   g.labels = { 0 => '2005', 3 => '2006', 5 => '2007', 7 => '2008' }
    #
    #   g = Gruff::Bar.new
    #   g.labels = ['2005', nil, nil, '2006', nil, nil, '2007', nil, nil, '2008'] # same labels for columns
    def labels=: (Hash[Integer, String] | [ String | nil ] labels) -> untyped

    # Set a rotation for labels. You can use  Default is +0+.
    # You can use a rotation between +0.0+ and +45.0+, or between +0.0+ and +-45.0+.
    #
    # @param rotation [Numeric] the rotation.
    # @rbs rotation: Float | Integer
    def label_rotation=: (Float | Integer rotation) -> untyped

    # Height of staggering between labels.
    # @deprecated
    def label_stagger_height=: (untyped _value) -> untyped

    # Set the large title of the graph displayed at the top.
    # You can draw a multi-line title by putting a line break in the string
    # or by setting an array as argument.
    #
    # @param title [String, Array] the title.
    # @rbs title: (String | Array[String])
    #
    # @example
    #   g = Gruff::Bar.new
    #   g.title = "The graph title"
    #
    #   g = Gruff::Bar.new
    #   g.title = ['The first line of title', 'The second line of title']
    def title=: (String | Array[String] title) -> untyped

    # Sets the top, bottom, left and right margins to +margin+.
    #
    # @param margin [Numeric] The margin size.
    # @rbs margin: Float | Integer
    def margins=: (Float | Integer margin) -> untyped

    # Sets the font for graph text to the font at +font_path+.
    #
    # @param font_path [String] The path to font.
    # @rbs font_path: String
    def font=: (String font_path) -> untyped

    # Same as {#font=} but for the title.
    #
    # @param font_path [String] The path to font.
    # @rbs font_path: String
    def title_font=: (String font_path) -> untyped

    # Set the font size of the large title at the top of the graph. Default is +36+.
    #
    # @param value [Numeric] title font size
    # @rbs value: Float | Integer
    def title_font_size=: (Float | Integer value) -> untyped

    # The font size of the labels around the graph. Default is +21+.
    #
    # @param value [Numeric] marker font size
    # @rbs value: Float | Integer
    def marker_font_size=: (Float | Integer value) -> untyped

    # Optionally set the size of the font. Based on an 800x600px graph.
    # Default is +20+.
    #
    # Will be scaled down if the graph is smaller than 800px wide.
    #
    # @param value [Numeric] legend font size
    # @rbs value: Float | Integer
    def legend_font_size=: (Float | Integer value) -> untyped

    # Set the font size of the no data message. Default is +80+.
    #
    # @param value [Numeric] no data font size
    # @rbs value: Float | Integer
    def no_data_font_size=: (Float | Integer value) -> untyped

    # Specifies whether to draw the title bolded or not. Default is +true+.
    #
    # @param value [Boolean] specifies whether to draw the title bolded or not.
    # @rbs value: bool
    def bold_title=: (bool value) -> untyped

    # Specifies the text color.
    #
    # @param value [String] color
    # @rbs value: String
    def font_color=: (String value) -> untyped

    # Add a color to the list of available colors for lines.
    #
    # @param colorname [String] The color.
    # @rbs colorname: String
    #
    # @example
    #   add_color('#c0e9d3')
    def add_color: (String colorname) -> untyped

    # Replace the entire color list with a new array of colors. Also
    # aliased as the {#colors=} setter method.
    #
    # If you specify fewer colors than the number of datasets you intend
    # to draw, it will cycle through the array, reusing colors as needed.
    #
    # Note that (as with the {#theme=} method), you should set up your color
    # list before you send your data (via the {#data} method).  Calls to the
    # {#data} method made prior to this call will use whatever color scheme
    # was in place at the time data was called.
    #
    # @param color_list [Array] The array of colors.
    # @rbs color_list: Array[String]
    #
    # @example
    #   replace_colors ['#cc99cc', '#d9e043', '#34d8a2']
    def replace_colors: (?Array[String] color_list) -> untyped

    # Set whether to make background transparent.
    #
    # @param value [Boolean] Specify whether to make background transparent.
    # @rbs value: bool
    def transparent_background=: (bool value) -> untyped

    # You can set a theme manually. Assign a hash to this method before you
    # send your data.
    #
    #   g = Gruff::Bar.new
    #   g.theme = {
    #     colors: %w(orange purple green white red),
    #     marker_color: 'blue',
    #     background_colors: ['black', 'grey'],
    #     background_direction: :top_bottom
    #   }
    #
    # +background_colors+
    # - Array<String> format value - background has gradation. (ex. +background_colors: ['black', 'grey']+)
    # - String value - background has solid color. (ex. +background_colors: 'orange'+)
    # - nil - background has transparent. (ex. +background_colors: nil+)
    #
    # +background_image+:
    # - Specify the path to image file when it draw the image as background.
    #
    # +background_direction+ accepts one of following parameters.
    # - +:top_bottom+
    # - +:bottom_top+
    # - +:left_right+
    # - +:right_left+
    # - +:topleft_bottomright+
    # - +:topright_bottomleft+
    #
    # (Or hopefully something better looking than that.)
    #
    # @param options [Hash] The optional setting for theme
    # @rbs options: Hash[Symbol, untyped]
    def theme=: (Hash[Symbol, untyped] options) -> untyped

    # Apply Apple's keynote theme.
    def theme_keynote: () -> untyped

    # Apply 37signals theme.
    def theme_37signals: () -> untyped

    # Apply Rails theme.
    def theme_rails_keynote: () -> untyped

    # Apply Odeo theme.
    def theme_odeo: () -> untyped

    # Apply pastel theme.
    def theme_pastel: () -> untyped

    # Apply greyscale theme.
    def theme_greyscale: () -> untyped

    # Input the data in the graph.
    #
    # Parameters are an array where the first element is the name of the dataset
    # and the value is an array of values to plot.
    #
    # Can be called multiple times with different datasets for a multi-valued
    # graph.
    #
    # If the color argument is nil, the next color from the default theme will
    # be used.
    #
    # @param name [String, Symbol] The name of the dataset.
    # @rbs name: (String | Symbol)
    # @param data_points [Array] The array of dataset.
    # @rbs data_points: Array[Float | Integer] | nil
    # @param color [String] The color for drawing graph of dataset.
    # @rbs color: String
    #
    # @note
    #   If you want to use a preset theme, you must set it before calling {#data}.
    #
    # @example
    #   data("Bart S.", [95, 45, 78, 89, 88, 76], '#ffcc00')
    def data: (String | Symbol name, ?Array[Float | Integer] | nil data_points, ?String color) -> untyped

    # You can manually set a minimum value instead of having the values
    # guessed for you.
    #
    # Set it after you have given all your data to the graph object.
    #
    # @return [Float] The minimum value.
    # @rbs return: Float
    def minimum_value: () -> Float

    attr_writer minimum_value: Float | Integer

    # You can manually set a maximum value, such as a percentage-based graph
    # that always goes to 100.
    #
    # If you use this, you must set it after you have given all your data to
    # the graph object.
    #
    # @return [Float] The maximum value.
    # @rbs return: Float
    def maximum_value: () -> Float

    attr_writer maximum_value: Float | Integer

    # Writes the graph to a file. Defaults to +'graph.png'+
    #
    # @param file_name [String] The file name of output image.
    # @rbs file_name: String
    #
    # @example
    #   write('graphs/my_pretty_graph.png')
    def write: (?String file_name) -> untyped

    # Return a rendered graph image.
    # This can use RMagick's methods to adjust the image before saving.
    #
    # @param format [String] The output image format.
    # @rbs format: String
    #
    # @return [Magick::Image] The rendered image.
    # TODO: RBS signature
    #
    # @example
    #   g = Gruff::Line.new
    #   g.data :Jimmy, [25, 36, 86, 39, 25, 31, 79, 88]
    #   g.data :Charles, [80, 54, 67, 54, 68, 70, 90, 95]
    #   image = g.to_image
    #   image = image.resize(400, 300).quantize(128, Magick::RGBColorspace)
    #   image.write('test.png')
    def to_image: (?String format) -> untyped

    # Return the graph as a rendered binary blob.
    #
    # @param format [String] The image format of binary blob.
    # @rbs format: String
    #
    # @return [String] The binary string.
    # @rbs return: String
    #
    # @deprecated Please use +to_image.to_blob+ instead.
    def to_blob: (?String format) -> String

    # Draw a graph.
    def draw: () -> untyped

    attr_reader renderer: Gruff::Renderer

    # Perform data manipulation before calculating chart measurements
    def setup_data: () -> untyped

    # Calculates size of drawable area and generates normalized data.
    #
    # * line markers
    # * legend
    # * title
    def setup_drawing: () -> untyped

    attr_reader store: Gruff::Store

    # @rbs return: bool
    def data_given?: () -> bool

    # @rbs return: Integer
    def column_count: () -> Integer

    # @rbs return: Integer
    def marker_count: () -> Integer

    # Make copy of data with values scaled between 0-100
    # @rbs return: Array[Gruff::Store::BasicData | Gruff::Store::XYData | Gruff::Store::XYPointsizeData]
    def normalize: () -> Array[Gruff::Store::BasicData | Gruff::Store::XYData | Gruff::Store::XYPointsizeData]

    def calculate_spread: () -> untyped

    # @rbs return: bool
    def hide_title?: () -> bool

    # @rbs return: bool
    def hide_labels?: () -> bool

    # @rbs return: bool
    def hide_left_label_area?: () -> bool

    # @rbs return: bool
    def hide_bottom_label_area?: () -> bool

    def setup_graph_measurements: () -> untyped

    # Draw the optional labels for the x axis and y axis.
    def draw_axis_labels: () -> untyped

    # Draws horizontal background lines and labels
    def draw_line_markers: () -> untyped

    def draw_marker_horizontal_line: (untyped y) -> untyped

    def draw_marker_vertical_line: (untyped x, ?tick_mark_mode: untyped) -> untyped

    # Return a calculation of center
    # @rbs size: Float | Integer
    # @rbs return: Float
    def center: (Float | Integer size) -> Float

    # Draws a legend with the names of the datasets matched
    # to the colors used to draw them.
    def draw_legend: () -> untyped

    # Draws a title on the graph.
    def draw_title: () -> untyped

    # Draws column labels below graph, centered over x
    #
    # @rbs x: Float | Integer
    # @rbs index: Integer
    # @rbs gravity: untyped
    # @rbs &: () -> void
    def draw_label: (Float | Integer x, Integer index, ?untyped gravity) { () -> void } -> untyped

    # @rbs index: Integer
    # @rbs &: () -> void
    def draw_unique_label: (Integer index) { () -> void } -> untyped

    # @rbs width: Float | Integer
    # @rbs height: Float | Integer
    # @rbs x: Float | Integer
    # @rbs y: Float | Integer
    # @rbs text: String | _ToS
    # @rbs gravity: untyped
    # @rbs rotation: Float | Integer
    def draw_label_at: (Float | Integer width, Float | Integer height, Float | Integer x, Float | Integer y, String | _ToS text, ?gravity: untyped, ?rotation: Float | Integer) -> untyped

    # Draws the data value over the data point in bar graphs
    #
    # @rbs width: Float | Integer
    # @rbs height: Float | Integer
    # @rbs x_offset: Float | Integer
    # @rbs y_offset: Float | Integer
    # @rbs data_point: String | _ToS
    # @rbs gravity: untyped
    def draw_value_label: (Float | Integer width, Float | Integer height, Float | Integer x_offset, Float | Integer y_offset, String | _ToS data_point, ?gravity: untyped) -> untyped

    # Shows an error message because you have no data.
    def draw_no_data: () -> untyped

    def draw_graph: () -> untyped

    # Resets everything to defaults (except data).
    def reset_themes: () -> untyped

    # @rbs value: Float | Integer
    # @rbs max_value: Float | Integer
    # @rbs return: Float | Integer
    def clip_value_if_greater_than: (Float | Integer value, Float | Integer max_value) -> (Float | Integer)

    # @rbs i: Integer
    # @rbs return: Integer | Float | BigDecimal
    # TODO: Fix return RBS signature
    def significant: (Integer i) -> (Integer | Float | BigDecimal)

    # Sort with largest overall summed value at front of array.
    def sort_data: () -> untyped

    # Set the color for each data set unless it was given in the data(...) call.
    def set_colors: () -> untyped

    # Sort with largest overall summed value at front of array so it shows up
    # correctly in the drawn graph.
    def sort_norm_data: () -> untyped

    private

    # @rbs return: Float
    def marker_caps_height: () -> Float

    # @rbs return: Float
    def labels_caps_height: () -> Float

    # @rbs return: Float
    def title_caps_height: () -> Float

    # @rbs return: Float
    def legend_caps_height: () -> Float

    # @rbs return: Float | Integer
    def setup_left_margin: () -> (Float | Integer)

    # @rbs return: Float
    def setup_right_margin: () -> Float

    # @rbs return: Float | Integer
    def extra_left_room_for_long_label: () -> (Float | Integer)

    # @rbs return: Float | Integer
    def extra_right_room_for_long_label: () -> (Float | Integer)

    # @rbs return: bool
    def require_extra_side_margin?: () -> bool

    # @rbs return: Float
    def setup_top_margin: () -> Float

    # @rbs return: Float
    def setup_bottom_margin: () -> Float

    # @rbs text: String | _ToS
    # @rbs return: String
    def truncate_label_text: (String | _ToS text) -> String

    # Return a formatted string representing a number value that should be
    # printed as a label.
    #
    # @rbs value: Float | Integer | BigDecimal
    # @rbs increment: Float | Integer | BigDecimal
    # @rbs return: String
    def label: (Float | Integer | BigDecimal value, Float | Integer | BigDecimal increment) -> String

    # @rbs value: Float | Integer | BigDecimal
    # @rbs increment: Float | Integer | BigDecimal
    # @rbs return: String
    def x_axis_label: (Float | Integer | BigDecimal value, Float | Integer | BigDecimal increment) -> String

    # @rbs value: Float | Integer | BigDecimal
    # @rbs increment: Float | Integer
    # @rbs return: String
    def y_axis_label: (Float | Integer | BigDecimal value, Float | Integer increment) -> String

    # TODO: RBS signature
    def calculate_legend_label_widths_for_each_line: (untyped legend_labels, untyped legend_square_width) -> untyped

    # TODO: RBS signature
    def calculate_legend_height: () -> untyped

    # Returns the height of the capital letter 'X' for the current font and
    # size.
    #
    # Not scaled since it deals with dimensions that the regular scaling will
    # handle.
    #
    # @rbs font: Gruff::Font
    # @rbs return: Float
    def calculate_caps_height: (Gruff::Font font) -> Float

    # @rbs font: Gruff::Font
    # @rbs return: Float
    def calculate_labels_height: (Gruff::Font font) -> Float

    # Returns the height of a string at this point size.
    #
    # Not scaled since it deals with dimensions that the regular scaling will
    # handle.
    #
    # @rbs font: Gruff::Font
    # @rbs text: String
    # @rbs rotation: Float | Integer
    # @rbs return: Float
    def calculate_height: (Gruff::Font font, String text, ?rotation: Float | Integer) -> Float

    # Returns the width of a string at this point size.
    #
    # Not scaled since it deals with dimensions that the regular
    # scaling will handle.
    #
    # @rbs font: Gruff::Font
    # @rbs text: String
    # @rbs rotation: Float | Integer
    # @rbs return: Float | Integer
    def calculate_width: (Gruff::Font font, String text, ?rotation: Float | Integer) -> (Float | Integer)

    # @rbs font: Gruff::Font
    # @rbs text: String
    # @rbs rotation: Float | Integer
    # @rbs return: untyped
    def text_metrics: (Gruff::Font font, String text, ?rotation: Float | Integer) -> untyped

    # @rbs return: Float | Integer | BigDecimal
    def calculate_increment: () -> (Float | Integer | BigDecimal)

    # @rbs font: Gruff::Font
    # @rbs label: String
    # @rbs margin: Float | Integer
    # @rbs rotation: Float | Integer
    # @rbs return: [Float | Integer, Float | Integer]
    def calculate_label_offset: (Gruff::Font font, String label, Float | Integer margin, Float | Integer rotation) -> [ Float | Integer, Float | Integer ]

    # Used for degree <=> radian conversions
    # @rbs angle: Float | Integer
    # @rbs return: Float
    def deg2rad: (Float | Integer angle) -> Float

    # @rbs angle: Float | Integer
    # @rbs return: Float
    def rad2deg: (Float | Integer angle) -> Float
  end

  class IncorrectNumberOfDatasetsException < StandardError
  end
end
