# Generated from lib/gruff/helper/bar_value_label.rb with RBS::Inline

# @private
module Gruff::BarValueLabel
  # @private
  #
  # @rbs value: Float | Integer
  # @rbs format: nil | String | Proc
  # @rbs proc_text_metrics: Proc
  # @rbs return: [String, untyped]
  # TODO: Fix the return type
  def self.metrics: (Float | Integer value, nil | String | Proc format, Proc proc_text_metrics) -> [ String, untyped ]

  # @private
  class Base
    attr_reader coordinate: [ Float | Integer, Float | Integer, Float | Integer, Float | Integer ]

    attr_reader value: Float | Integer

    # @rbs coordinate: [nil | Float | Integer, nil | Float | Integer, nil | Float | Integer, nil | Float | Integer]
    # @rbs value: Float | Integer
    # @rbs return: void
    def initialize: ([ nil | Float | Integer, nil | Float | Integer, nil | Float | Integer, nil | Float | Integer ] coordinate, Float | Integer value) -> void
  end

  # @private
  class Bar < Base
    # @rbs format: nil | String | Proc
    # @rbs proc_text_metrics: Proc
    # @rbs &: (Float | Integer, Float | Integer, String, Float, Float) -> void
    def prepare_rendering: (nil | String | Proc format, Proc proc_text_metrics) { (Float | Integer, Float | Integer, String, Float, Float) -> void } -> untyped
  end

  # @private
  class SideBar < Base
    # @rbs format: nil | String | Proc
    # @rbs proc_text_metrics: Proc
    # @rbs &: (Float | Integer, Float | Integer, String, Float, Float) -> void
    def prepare_rendering: (nil | String | Proc format, Proc proc_text_metrics) { (Float | Integer, Float | Integer, String, Float, Float) -> void } -> untyped
  end
end
